name: CI/CD Room Service Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Prepare unit tests
        run: |
          sudo apt update
          sudo apt install -y python3-pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          python -m pytest booking_service/tests/unit

      - name: Prepare db
        run: |
          sudo docker run -e POSTGRES_PASSWORD=password -p 5432:5432 -d postgres:14

      - name: Prepare e2e tests
        run: |
          sudo docker build . --file booking_service/Dockerfile --tag booking-back-tests
          sudo docker build . --file room_service/Dockerfile --tag room-back-tests
          sudo docker run -p 8001:80 -e AMQP_URL=${{ secrets.ENV_AMQP_URL }} -e POSTGRES_DRIVERNAME=postgresql -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -e POSTGRES_HOST=172.17.0.1 -e POSTGRES_PORT=5432 -e POSTGRES_DATABASE=postgres -d room-back-tests
          sleep 5
          sudo docker run -p 8080:80 -e AMQP_URL=${{ secrets.ENV_AMQP_URL }} -e ROOM_SERVICE_URL=http://172.17.0.1:8001/api -e POSTGRES_DRIVERNAME=postgresql -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=password -e POSTGRES_HOST=172.17.0.1 -e POSTGRES_PORT=5432 -e POSTGRES_DATABASE=postgres -d booking-back-tests

      - name: Run e2e tests
        run: |
          python -m pytest booking_service/tests/e2e

  build_and_push_yc:
    name: Build and push to Yandex Cloud
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Upgrade pip if necessary
        run: |
          python -m pip install --upgrade pip

      - name: Build booking-service docker image
        run: |
          docker build . --file booking_service/Dockerfile --tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/booking-service:latest

      - name: Build room-service docker image
        run: |
          docker build . --file room_service/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/room-service:latest -t cr.yandex/${{ secrets.YC_REGISTRY_ID }}/room-service:latest

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push room-service tag to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/room-service:latest

      - name: Login to YC Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: cr.yandex
          username: json_key
          password: ${{ secrets.YC_KEYS }}

      - name: Push booking-service tag to YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/booking-service:latest

      - name: Push room-service tag to YC Registry
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/room-service:latest 

  deploy:
    name: Deploy to Yandex Cloud
    runs-on: ubuntu-latest
    needs: [ build_and_push_yc ]
    steps:
      - name: Deploy booking-service serverless container
        uses: yc-actions/yc-sls-container-deploy@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_KEYS }}
          container-name: ${{ secrets.YC_BOOKING_SERVICE_CONTAINER_NAME }}
          folder-id: ${{ secrets.YC_FOLDER_ID }}
          revision-image-url: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/booking-service:latest
          revision-service-account-id: ${{ secrets.YC_SA_ID }}
          revision-env: |
            AMQP_URL=${{ secrets.ENV_AMQP_URL }}
            ROOM_SERVICE_URL=${{ secrets.ROOM_SERVICE_URL }}
            POSTGRES_DRIVERNAME=${{ secrets.POSTGRES_DRIVERNAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DATABASE=${{ secrets.POSTGRES_BOOKING_DATABASE }}
      - name: Deploy room-service serverless container
        uses: yc-actions/yc-sls-container-deploy@v1
        with:
          yc-sa-json-credentials: ${{ secrets.YC_KEYS }}
          container-name: ${{ secrets.YC_ROOM_SERVICE_CONTAINER_NAME }}
          folder-id: ${{ secrets.YC_FOLDER_ID }}
          revision-image-url: cr.yandex/${{ secrets.YC_REGISTRY_ID }}/room-service:latest
          revision-service-account-id: ${{ secrets.YC_SA_ID }}
          revision-env: |
            AMQP_URL=${{ secrets.ENV_AMQP_URL }}
            POSTGRES_DRIVERNAME=${{ secrets.POSTGRES_DRIVERNAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            POSTGRES_DATABASE=${{ secrets.POSTGRES_ROOM_SERVICE_DATABASE }}